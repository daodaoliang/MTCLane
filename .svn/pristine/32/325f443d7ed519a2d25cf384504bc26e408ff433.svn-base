/**
 * 配置文件操作类
 */
package com.hgits.util;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import com.hgits.util.file.FileUtils;

/**
 * 配置文件操作类
 *
 * @author wh
 *
 */
public class PropertiesUtils {

    private static Properties properties = new Properties();

    /* properties文件名 */
    private static String PROPERTIES_FILE_NAME = "application.properties";

    /**
     * 初始化properties，即载入数据
     */
    public static void initProperties(String propertiesFileName) throws IOException {
        InputStream ips = new BufferedInputStream(new FileInputStream(propertiesFileName));
        Reader reader = new InputStreamReader(ips, "UTF-8");
        properties.load(reader);
        ips.close();
    }

    /**
     * 将数据载入properties，并返回key的值
     *
     * @param key 键
     * @return 值
     */
    public static String getKey(String key) throws IOException {
        if (properties.isEmpty())// 如果properties为空，则初始化一次。
        {
        	loadAllProperties();
        }
        String value = properties.getProperty(key);
        return value == null ? "" : value; // properties返回的值为String，转为整数
    }

    /**
     * 修改指定键的值
     *
     * @param key 键
     * @param value 值
     */
    public static void saveoOrUpdateKey(String key, int value) throws IOException {
        if (properties.isEmpty()) {
        	loadAllProperties();
        }
        // 修改值
        properties.setProperty(key, value + "");
        // 保存文件
        try {
            URL fileUrl = PropertiesUtils.class.getClassLoader().getResource(
                    PROPERTIES_FILE_NAME);// 得到文件路径
            FileOutputStream fos = new FileOutputStream(new File(
                    fileUrl.toURI()));
            properties.store(fos, "the primary key of article table");
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 遍历显示所有的key
     *
     * @param properties
     * @return
     */
    private static List<String> getKeys(Properties properties) {
        List<String> tempList = new ArrayList<String>();
        Enumeration<?> enu = properties.propertyNames();
        while (enu.hasMoreElements()) {
            String key = (String) enu.nextElement();
            tempList.add(key);
        }
        return tempList;
    }

    /**
     * 遍历显示所有的value
     *
     * @param properties
     */
    private static List<String> getValues(Properties properties) {
        List<String> tempList = new ArrayList<String>();
        Enumeration<?> enu = properties.elements();
        while (enu.hasMoreElements()) {
            Object value = enu.nextElement();
            tempList.add((String) value);
        }
        return tempList;
    }

    /**
     * 遍历properties文件，获取键值对的集合
     *
     * @param properties
     */
    private static Map<String, String> getKeysAndValues(Properties properties) {
        Iterator<Entry<Object, Object>> it = properties.entrySet().iterator();
        Map<String, String> tempMap = new HashMap<String, String>();
        while (it.hasNext()) {
            Entry<Object, Object> entry = it.next();
            Object key = entry.getKey();
            Object value = entry.getValue();
            tempMap.put((String) key, (String) value);
        }
        return tempMap;
    }

    /**
     * 遍历properties文件，获取键值对的集合
     */
    public static Map<String, String> getKeysAndValues() throws IOException {
        if (properties.isEmpty()) {
            loadAllProperties();
        }
        Map<String, String> tempMap = getKeysAndValues(properties);
        return tempMap;
    }

    ;

	/**
	 * 加载根目录下的所有properties文件
	 */
	private static void loadAllProperties() throws IOException {
        String filter[] = {"properties"};
        Collection<File> list = FileUtils.listFiles(new File(FileUtils.getRootPath()+"/resource"), filter, false);
        for (File file : list) {
            initProperties(file.getAbsolutePath());
        }

    }

    public static void main(String[] args) {
        try {
//            System.out.println(getKey(KEY_LASTID));
//            System.out.println(getKey("sitename"));
//            saveoOrUpdateKey(KEY_LASTID, 1);
            System.out.println();
        } catch (Exception e) {
        }
    }
}