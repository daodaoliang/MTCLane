package com.hgits.control;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.hgits.hardware.Keyboard;
import com.hgits.util.IntegerUtils;
import com.hgits.util.StringUtils;
import com.hgits.util.cache.ParamCacheQuery;
import com.hgits.vo.Constant;
import com.hgits.vo.Operator;
import com.hgits.vo.Staff;

import ui.ExtJFrame;
import ui.LoginJFrame;
import ui.LogoutJFrame;
import ui.MilitaryVehHintJFrame;

/**
 * 上下班控制类+ETC军车卡提示控制
 *
 * @author 王国栋
 */
public class JobControl {

    boolean onDuty;//上班标识符
    ExtJFrame extJFrame;
    int runningMode = 1;
    Keyboard keyboard;//键盘
    LoginJFrame loginJFrame;
    LogoutJFrame logoutJFrame;
    MilitaryVehHintJFrame militaryVehHintJFrame;

    public JobControl(ExtJFrame extJFrame, Keyboard keyboard) {
        init();
        this.extJFrame = extJFrame;
        this.keyboard = keyboard;
    }

    private void init() {
        ThreadPoolControl.getThreadPoolInstance().execute(new Runnable() {
            @Override
            public void run() {
                loginJFrame = LoginJFrame.getSingleInstance();
                logoutJFrame = LogoutJFrame.getSingleInstance();
                militaryVehHintJFrame = MilitaryVehHintJFrame.getSingleInstance();
            }
        });
    }

    /**
     * 产生班次，软件启动后依次增长，第二天从1开始
     *
     * @param jobstart
     * @return 班次
     */
    private int getShiftId(Timestamp jobstart) {
        int a1;//临时文件中记录的上班日期 如20150303
        int a2;//当前上班日期 如20150303
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        if (jobstart != null) {
            String temp = sdf.format(jobstart);
            a2 = IntegerUtils.parseString(temp);
        } else {
            return 0;
        }
        int shiftId = 0;
        String path = "temp/temp_shiftId.txt";
        File file = new File(path);
        if (file.exists() && file.isFile()) {
            FileInputStream fis = null;
            try {
                fis = new FileInputStream(file);
                byte[] buffer = new byte[1024];
                int i = fis.read(buffer);
                String str = new String(buffer, 0, i);
                String[] tempBuffer = str.split("_");
                a1 = IntegerUtils.parseString(tempBuffer[0]);
                if (a2 != a1) {
                    //第二天班次从1开始
                    shiftId = 1;
                } else {
                    shiftId = IntegerUtils.parseString(tempBuffer[1]) + 1;
                }
            } catch (Exception ex) {
                LogControl.logInfo("异常", ex);
                shiftId = 1;//出现异常，班次改为1
            } finally {
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (IOException ex) {
                        LogControl.logInfo("异常", ex);
                    }
                }
            }
        } else {
            shiftId = 1;
        }
        FileOutputStream fos = null;
        FileChannel fc = null;
        try {
            fos = new FileOutputStream(path);
            StringBuilder sb = new StringBuilder();
            sb.append(a2).append("_").append(shiftId);
            fc = fos.getChannel();
            fc.write(ByteBuffer.wrap(sb.toString().getBytes()));
            fc.force(true);
        } catch (Exception ex) {
            LogControl.logInfo("异常", ex);
        } finally {
            try {
                if (fos != null) {
                    fos.close();
                }
                if (fc != null) {
                    fc.close();
                }
            } catch (IOException ex) {
                LogControl.logInfo("异常", ex);
            }
        }
        return shiftId;
    }

    /**
     * 对应车道上班流程 收费员按上班键后进入上班流程 1 收费界面提示收费员刷身份卡 2
     * 收费员将身份卡放置到读卡器上，读卡器从身份卡中读取收费员身份id，收费界面调至上班界面，上班界面显示收费员id并要求收费员收入密码 3
     * 收费员通过收费键盘输入密码，并选择运营模式后确认，上班界面消失，回到收费界面 4 如是出口车道，要求收费员输入发票号码
     *
     * @param cardSerial 身份卡序列号
     * @param staffId 员工号
     * @param flag 登录标识，0正常 1仅测试模式
     * @return 上班成功返回员工信息,否则返回null
     */
    public Staff login(String cardSerial, String staffId, int flag) {
        String temp = StringUtils.encodeID(staffId);
        LogControl.logInfo("等待上班");
        Operator op = ParamCacheQuery.queryOperator(temp);
        if (op == null) {
            LogControl.logInfo("未知员工号" + temp);
            return null;
        }
        final String password = op.getPassWord();
        Staff staff = null;

        ThreadPoolControl.getThreadPoolInstance().execute(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                    }
                    if (onDuty||!loginJFrame.isVisible()) {
                        break;
                    }
                    String str = loginJFrame.getPassword();
                    if (str != null && str.length() == 8 && str.equals(password)) {
                        loginJFrame.enableConfirm();
                        extJFrame.requestFocus();
                    } else {
                        loginJFrame.unableConfirm();
                    }
                }
            }
        });
        runningMode = 1;
        loginJFrame.comeUp(StringUtils.encodeID(staffId));
        extJFrame.setAlwaysOnTop(false);
        extJFrame.requestFocus();
        StringBuilder sb = new StringBuilder();
        String str;
        //用户登陆成功前
        while (staff == null) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
            }
            str = keyboard.waitForOrder();                                      //输入密码,密码为8位
            if (str.matches(Constant.REGIX_NUM)) {
                extJFrame.updateInfo("请输入密码", "请输入密码");
                sb.append(str);
                if (sb.length() > 8) {
                    sb.delete(8, sb.length());
                }
            } else if ("取消".equals(str)) {                                    //用户取消上班
                if (sb.length() > 0) {
                    extJFrame.updateInfo("请输入密码", "请输入密码");
                    sb.delete(sb.length() - 1, sb.length());
                } else {
                    loginJFrame.setVisible(false);
//                    extJFrame.setAlwaysOnTop(true);
                    extJFrame.showOnTop();
                    return null;
                }
            } else {
                if (sb.length() < 8) {
                    extJFrame.updateInfo("", "请输入数字密码");
                }
                keyboard.sendAlert();
                continue;
            }
            loginJFrame.updatePassword(sb.toString());                          //在登录页面更新密码显示栏
            if (sb.length() == 8) {
                if (password.equals(sb.toString())) {
                    staff = new Staff();
                    staff.setStaffId(StringUtils.encodeID(staffId));
                    Timestamp jobstart = new Timestamp(System.currentTimeMillis());
                    staff.setJobStartTime(jobstart);
                    staff.setSquadId(getSquadId(jobstart));
                    staff.setSquadDate(getSquadDate(jobstart));
                    staff.setShiftId(getShiftId(jobstart));
                    staff.setStaffCardSerial(cardSerial);
                    staff.setStaffName(op.getOperatorName());
                } else {
                    extJFrame.updateInfo("", "密码错误");
                    LogControl.logInfo("输入密码" + password + "错误");
                }
            }
        }
        loginJFrame.updateStaff(staff.getStaffName());                          //更新收费员姓名并显示运营界面
        loginJFrame.updateChPanel(flag);                                        //更新运营界面按钮显示
        runningMode:                                                            //选择运营模式以及确认
        while (true) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
            }
            str = keyboard.waitForOrder();
            switch (str) {
                case "取消":
                    LogControl.logInfo("取消上班");
                    onDuty = false;
                    loginJFrame.setVisible(false);                                      //用户取消上班
//                    extJFrame.setAlwaysOnTop(true);
                    extJFrame.showOnTop();
                    return null;
                case "确认":                                                    //用户确认上班
                    LogControl.logInfo("上班");
                    onDuty = true;
                    break runningMode;
                case "1":
                    runningMode = 1;
                    break;
                case "2":
                    runningMode = 2;
                    break;
                case "3":
                    runningMode = 3;
                    break;
                default:
                    keyboard.sendAlert();
                    break;
            }
            loginJFrame.updateRunMode(runningMode);                             //更新运营模式
        }
        switch (runningMode) {
            case 1:
                //进入运营模式
                LogControl.logInfo("运营模式");
                break;
            case 2:
                //进入模拟模式
                LogControl.logInfo("模拟模式");
                break;
            case 3:                                                             //测试模式
                LogControl.logInfo("测试模式");
                break;
        }
        loginJFrame.setVisible(false);                                                  //登录窗体隐藏
        
//        extJFrame.setAlwaysOnTop(true);
        extJFrame.showOnTop();
        LogControl.setStaff(staff);
        return staff;
    }

    /**
     * 根据给定时间生成工班号 2014-1-1 23:30 至2014-1-2 7:30之间上班，工班为1;2014-1-2 7:30
     * 至2014-1-2 15:30之间上班，工班为2;2014-1-2 15:30 至2014-1-2 23:30之间上班，工班为3
     *
     * @param ts 给定时间
     * @return 工班号
     */
    public int getSquadId(Timestamp ts) {
        int squadId = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("HHmmss");
        String time = sdf.format(ts);
        int t = IntegerUtils.parseString(time);
        if ((t >= 233000 && t < 24000000) || t < 73000) {
            squadId = 1;
        } else if (t >= 73000 && t < 153000) {
            squadId = 2;
        } else if (t >= 153000 && t < 233000) {
            squadId = 3;
        }
        return squadId;
    }

    /**
     * 获取工班日期 如2014-1-1 23:30 至2014-1-2 23:30之间上班，20140102
     *
     * @param ts 上班时间
     * @return 工班日期
     */
    public Date getSquadDate(Timestamp ts) {
        SimpleDateFormat sdf = new SimpleDateFormat("HHmmss");
        String time = sdf.format(ts);
        int t = IntegerUtils.parseString(time);
        Date date = new Date(0);
        if (t >= 233000) {
            ts = new Timestamp(ts.getTime() + 24 * 60 * 60 * 1000);

        }
        sdf.applyPattern("yyyyMMdd");
        String temp = sdf.format(ts);
        try {
            date = sdf.parse(temp);
        } catch (ParseException ex) {
            LogControl.logInfo("异常", ex);
        }
        return date;
    }

    /**
     * 对应车道下班流程 收费员按下班键后进入下班流程 收费界面弹出下班界面,收费员按确认键确认下班,按取消键取消下班
     *
     * @return 下班成功返回true,下班失败返回false
     */
    public boolean logout() {
        LogControl.logInfo("等待下班");
        boolean flag = false;

        logoutJFrame.setVisible(true);
        extJFrame.setAlwaysOnTop(false);
        extJFrame.requestFocus();
        extJFrame.updateInfo("", "等待下班");
        String str;
        OUTER:
        while (true) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
            }
            str = keyboard.waitForOrder();
            switch (str) {
                case "确认":
                    LogControl.logInfo("下班");
                    LogControl.setStaff(null);
                    ExtJFrame.appendTitle(""); //清空界面标题栏提示
                    flag = true;
                    onDuty = false;
                    break OUTER;
                case "取消":
                    LogControl.logInfo("取消下班");
                    flag = false;
                    break OUTER;
                default:
                    keyboard.sendAlert();
                    break;
            }
        }
        logoutJFrame.setVisible(false);
        extJFrame.showOnTop();
        return flag;
    }
    
    /**
     * ETC军车卡刷卡提示操作流程
     * @return 确认军警车返回true，取消军警车返回false
     * add by yili
     */
    public boolean militaryVehHint(){
		LogControl.logInfo("ETC卡军警车提示");
		boolean flag = false;

		militaryVehHintJFrame.setVisible(true);
		extJFrame.setAlwaysOnTop(false);
		extJFrame.requestFocus();
		extJFrame.updateInfo("本站交易ETC卡检测", "检测到当前ETC卡为军车类型\n按【确认】键进行军警车收费流程\n");
		String str;

		OUTER: while (true) {
			try {
				Thread.sleep(10);
			} catch (InterruptedException ex) {
			}
			str = keyboard.waitForOrder();
			switch (str) {
			case "确认":
				LogControl.logInfo("军警车");
				flag = true;
				break OUTER;
			default:
				keyboard.sendAlert();
				break;
			}
		}
		militaryVehHintJFrame.setVisible(false);
		extJFrame.showOnTop();
		return flag;
    }
}
