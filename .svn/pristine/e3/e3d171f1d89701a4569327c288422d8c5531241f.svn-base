package com.hgits.util;

import java.io.File;
import java.text.MessageFormat;
import java.util.List;

import org.apache.log4j.Logger;

import com.hgits.exception.MTCException;
import com.hgits.util.file.FileUtils;
import com.hgits.util.file.ReadFromFileUtils;
import com.hgits.vo.Constant;

/**
 * 打印模版定制工具类
 * @author zengzb
 * @since 2016-08-30
 */
public class PrintUitls {
	private Logger log = Logger.getLogger(this.getClass().getName());
	private final static PrintUitls util = null;
	private static String printPattern = null;
	
	//禁用外部构造对象
	private PrintUitls(){
		//根据配置文件加载打印模版
		loadPrintPattern();
	}
	
	public static PrintUitls getInstance(){
		if(util == null){
			return new PrintUitls();
		}
		return util;
	}
	
	/**
	 * 加载打印配置模版
	 * @author zengzb
	 */
	private void loadPrintPattern(){
		String filePath = null;
		try {
			String collectFlag = MyPropertiesUtils.getProperties(Constant.PROP_MTCLANE_FUNCTION, "collectFlag", "0");
			if("1".equals(collectFlag)){//开启代收功能
				filePath = new StringBuilder()
				.append(FileUtils.getRootPath())
				.append("/resource/template/printCollect.txt").toString();
			}else{
				filePath = new StringBuilder()
					.append(FileUtils.getRootPath())
					.append("/resource/template/print.txt").toString();
			}
			
			//构造模版文件对象
			File file = new File(filePath);
			
			//跳过文件第一行内容并读取之后的文本内容，第一行用于进行参数的注释			
			List<String> contentList = ReadFromFileUtils.readFileByLinesToListSkipTitleList(file, "UTF-8");
			if(null != contentList){
				StringBuffer sBuffer = new StringBuffer();//临时保存读取的字符串
				log.debug("==============输出打印指令==============");
				for(String tmpStr : contentList){
					log.debug(tmpStr);
					sBuffer.append(tmpStr);//拼接读取的每一行字符串
				}
				printPattern = sBuffer.toString();
			}
		} catch (MTCException e) {
			log.error("加载打印模版配置文件失败!", e);
			e.printStackTrace();
		}
	}
	
	/**
	 * 获取打印的原始模版
	 * @return 配置模版
	 */
	public String getPrintPattern(){
		return printPattern;
	}
	
	/**
	 * 打印
	 * @param params
	 * @return String 打印指令模版
	 */
	public String getPrintTemplate(String... params){
		String template = "";
		if(null == params || params.length < 1){
			return null;
		}
		
		if(null != printPattern){
			template = MessageFormat.format(printPattern, params);
		}
		return template;
	}
	
	public static void main(String[] args) {
//		String str = PrintUitls.getInstance().getPrintPattern();
//		System.out.println(str);
//		
//		System.out.println("======================================");
//		String[] params = new String[]{"a","b","c","d","e","f","g","h","i","j","k","m"};
//		String str2 = PrintUitls.getInstance().getPrintTemplate(params);
//		System.out.println(str2);
	}
}
