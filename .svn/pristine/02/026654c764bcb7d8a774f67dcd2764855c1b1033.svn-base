package com.hgits.realTimePath;

import com.hgits.control.ThreadPoolControl;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import net.sf.json.JSONObject;

import com.hgits.realTimePath.vo.CostRecord;
import com.hgits.realTimePath.vo.EntryStation;
import com.hgits.realTimePath.vo.PathInfo;
import com.hgits.realTimePath.vo.RequestPath;
import com.hgits.util.MyPropertiesUtils;
import com.hgits.vo.Constant;

/**
 *
 * @author jelly
 */
public class Test {

    public static void main(String[] args) throws Exception {
        Test t = new Test();
        t.test();
    }

    /**
     * 入口信息上传测试
     */
    public void testEntryInfo() {
        try {
            List<String> list = new ArrayList();
            list.add(Constant.PROP_MTCCONFIG);
            list.add(Constant.PROP_MTCLANE);
            list.add(Constant.PROP_MTCLANE_COMM);
            list.add(Constant.PROP_MTCLANE_CONSTANT);
            list.add(Constant.PROP_MTCLANE_ETC);
            list.add(Constant.PROP_MTCLANE_FUNCTION);
            list.add(Constant.PROP_MTCLANE_LPR);
            list.add(Constant.PROP_MTCLANE_RTP);
            list.add(Constant.PROP_MTCLANE_SERVER);
            list.add(Constant.PROP_MTCLANE_TEST);
            list.add(Constant.PROP_SOCKET);
            MyPropertiesUtils.loadProperties(list);
            RealTimePath fs = RealTimePath.getSingleInstance();
            ThreadPoolControl.getThreadPoolInstance().execute(fs);
            EntryStation esi = new EntryStation();
            esi.setCardNo("0000000000");
            esi.setCardType(1);
            esi.setEntryTime(new Date());
            esi.setImgPath("000");
            esi.setLaneid("E01");
            esi.setPlateNum("湘A12345");
            esi.setStaffid("123456");
            esi.setStationid("4914");
            esi.setVehClass((short) 1);
            esi.setVehColor("U");
            Thread.sleep(3000);
            System.out.println("发送入口站信息");
            fs.sendEnterStationInfo(esi);
        } catch (Exception ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * 请求实时收费路径测试
     */
    public void testPathRequest() {
        try {
            List<String> list = new ArrayList();
            list.add(Constant.PROP_MTCCONFIG);
            list.add(Constant.PROP_MTCLANE);
            list.add(Constant.PROP_MTCLANE_COMM);
            list.add(Constant.PROP_MTCLANE_CONSTANT);
            list.add(Constant.PROP_MTCLANE_ETC);
            list.add(Constant.PROP_MTCLANE_FUNCTION);
            list.add(Constant.PROP_MTCLANE_LPR);
            list.add(Constant.PROP_MTCLANE_RTP);
            list.add(Constant.PROP_MTCLANE_SERVER);
            list.add(Constant.PROP_MTCLANE_TEST);
            list.add(Constant.PROP_SOCKET);
            MyPropertiesUtils.loadProperties(list);
            RealTimePath fs = RealTimePath.getSingleInstance();
            ThreadPoolControl.getThreadPoolInstance().execute(fs);
            RequestPath pr = new RequestPath();
            pr.setEnStation("0501");
            pr.setEnLane("E01");
            pr.setEntryTime(new Date());
            pr.setExitVehColor("U");
            short i = 1;
            pr.setVehClass(i);
            pr.setPlateNum("湘A12345");
            pr.setExitStation("4914");
            pr.setExitLane("X01");
            pr.setExitTime(new Date());
            pr.setCardType(1);
            pr.setCardNum("1234567890");
            pr.setFareWeight("400");
            pr.setLimitWeight("400");
            Thread.sleep(3000);
            System.out.println("发送实时路径收费请求");
            int serial = fs.requestForPath(pr);
            PathInfo pi = fs.getPathInfo(serial);
            System.out.println("pathInfo:" + pi);
        } catch (Exception ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * 收费信息上传测试
     */
    public void testCostRecord() {
        try {
            List<String> list = new ArrayList();
            list.add(Constant.PROP_MTCCONFIG);
            list.add(Constant.PROP_MTCLANE);
            list.add(Constant.PROP_MTCLANE_COMM);
            list.add(Constant.PROP_MTCLANE_CONSTANT);
            list.add(Constant.PROP_MTCLANE_ETC);
            list.add(Constant.PROP_MTCLANE_FUNCTION);
            list.add(Constant.PROP_MTCLANE_LPR);
            list.add(Constant.PROP_MTCLANE_RTP);
            list.add(Constant.PROP_MTCLANE_SERVER);
            list.add(Constant.PROP_MTCLANE_TEST);
            list.add(Constant.PROP_SOCKET);
            MyPropertiesUtils.loadProperties(list);
            RealTimePath fs = RealTimePath.getSingleInstance();
            ThreadPoolControl.getThreadPoolInstance().execute(fs);
            CostRecord cr = new CostRecord();
            cr.setOrderSN("0001");
            cr.setEntryStationid("0501");
            cr.setTrafficStationid("0501");
            cr.setEntryLaneid("E01");
            cr.setEntryTime(new Date());
            cr.setEntryStaffid("000026");
            cr.setVehColor("蓝");
            short a1 = 1;
            cr.setVehClass(a1);
            cr.setPlateNum("湘A12345");
            cr.setDetectWeight("5000");
            cr.setFareWeight("4900");
            cr.setLimitWeight("4000");
            cr.setExitStationid("4914");
            cr.setExitLaneid("X01");
            cr.setExitTime(new Date());
            cr.setCardNum("0123456789");
            cr.setChargeType(a1);
            int a2 = 1;
            cr.setCardType(a2);
            cr.setJobStart(new Date());
            cr.setTranNum(a2);
            cr.setFareVer("001");
            cr.setSaleRate("0.95");
            cr.setImgPath("http://192.168.1.1/pic/ltest.jpg");
            cr.setExitStaffid("000018");
            cr.setOrderPay("50.00");
            cr.setRealFee("50.00");
            cr.setExitMop(a2);
            Thread.sleep(3000);
            System.out.println("收费信息上传");
            fs.sendCostRecordInfo(cr);
        } catch (Exception ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * 测试心跳检测
     */
    public void testHeartBeat() {
        try {
            List<String> list = new ArrayList();
            list.add(Constant.PROP_MTCCONFIG);
            list.add(Constant.PROP_MTCLANE);
            list.add(Constant.PROP_MTCLANE_COMM);
            list.add(Constant.PROP_MTCLANE_CONSTANT);
            list.add(Constant.PROP_MTCLANE_ETC);
            list.add(Constant.PROP_MTCLANE_FUNCTION);
            list.add(Constant.PROP_MTCLANE_LPR);
            list.add(Constant.PROP_MTCLANE_RTP);
            list.add(Constant.PROP_MTCLANE_SERVER);
            list.add(Constant.PROP_MTCLANE_TEST);
            list.add(Constant.PROP_SOCKET);
            MyPropertiesUtils.loadProperties(list);
            RealTimePath fs = RealTimePath.getSingleInstance();
            ThreadPoolControl.getThreadPoolInstance().execute(fs);
        } catch (Exception ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void test() throws Exception {
        File file = new File("temp", "realTimeTemp.txt");
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
        String str;
        while ((str = br.readLine()) != null) {
            System.out.println(str);
            JSONObject jo = JSONObject.fromObject(str);
            EntryStation es = EntryStation.parseJSON(jo);
            System.out.println(es.toJSONString());
            break;
        }
        br.close();
    }

    public void test1() throws UnsupportedEncodingException {
        String str = "湘A12345";//[-26, -71, -104, 65]
        String str1 = "婀楢";//[-27, -87, -128, -26, -91, -94]
        byte[] buffer1 = str.getBytes("UTF-8");
        str = new String(buffer1, "gbk");
        System.out.println(str);
        System.out.println(Arrays.toString(str.toCharArray()));
        char[] charBuffer = str.toCharArray();
        System.out.println(str.codePointAt(1));

        System.out.println(Arrays.toString(str.getBytes()));
//        System.out.println(Arrays.toString(str.getBytes("gbk")));
        System.out.println(Arrays.toString(str1.getBytes("UTF-8")));
//        System.out.println(Arrays.toString(str.getBytes("gbk")));
        byte[] buffer = new byte[]{-27, -87, -128, -26, -91, -94};
        System.out.println(new String(buffer, "gbk"));

    }

    String str = "[0, 0, 1, 31, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 1, 50, 48, 49, 53, 48, 51, 49, 51, 49, 54, 52, 53, 50, 49, 57, 53, 57, 48, 66, 68, 69, 66, 52, 52, 69, 65, 53, 55, 49, 51, 69, 57, 67, 51, 55, 65, 53, 49, 68, 49, 49, 54, 69, 50, 54, 49, 65, 51, 54, 51, 123, 34, 69, 110, 116, 114, 121, 83, 116, 97, 116, 105, 111, 110, 73, 110, 102, 111, 34, 58, 123, 34, 83, 116, 97, 116, 105, 111, 110, 73, 68, 34, 58, 34, 52, 57, 49, 52, 34, 44, 34, 67, 104, 97, 110, 110, 101, 108, 78, 111, 34, 58, 34, 69, 48, 49, 34, 44, 34, 69, 110, 116, 114, 121, 84, 105, 109, 101, 34, 58, 34, 50, 48, 49, 53, 48, 51, 49, 51, 49, 54, 52, 53, 50, 49, 34, 44, 34, 83, 116, 97, 102, 102, 73, 68, 34, 58, 34, 49, 50, 51, 52, 53, 54, 34, 44, 34, 67, 97, 114, 100, 78, 111, 34, 58, 34, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 86, 101, 104, 105, 99, 108, 101, 67, 108, 97, 115, 115, 34, 58, 34, 49, 34, 44, 34, 80, 108, 97, 116, 101, 78, 117, 109, 34, 58, 34, -26, -71, -104, 65, 49, 50, 51, 52, 53, 34, 44, 34, 99, 97, 114, 100, 84, 121, 112, 101, 34, 58, 34, 49, 34, 44, 34, 86, 101, 104, 105, 99, 108, 101, 67, 111, 108, 111, 114, 34, 58, 34, 85, 34, 44, 34, 105, 109, 103, 80, 97, 116, 104, 34, 58, 34, 48, 48, 48, 34, 125, 125]";
    String st1 = "[0, 0, 1, 42, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 1, 50, 48, 49, 53, 48, 51, 49, 51, 49, 54, 53, 54, 50, 55, 51, 55, 55, 57, 65, 69, 69, 52, 49, 53, 54, 66, 49, 50, 56, 57, 57, 48, 69, 50, 51, 49, 57, 67, 54, 50, 48, 53, 56, 49, 67, 48, 65, 52, 70, 70, 123, 34, 69, 110, 116, 114, 121, 83, 116, 97, 116, 105, 111, 110, 34, 58, 123, 34, 67, 97, 114, 100, 78, 111, 34, 58, 34, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 34, 44, 34, 67, 104, 97, 110, 110, 101, 108, 78, 111, 34, 58, 34, 69, 48, 49, 34, 44, 34, 69, 110, 116, 114, 121, 84, 105, 109, 101, 34, 58, 34, 50, 48, 49, 53, 48, 51, 49, 51, 49, 54, 53, 54, 50, 55, 34, 44, 34, 73, 109, 97, 103, 101, 80, 97, 116, 104, 34, 58, 34, 104, 116, 116, 112, 58, 47, 47, 49, 57, 50, 46, 49, 54, 56, 46, 49, 46, 49, 47, 112, 105, 99, 47, 116, 101, 115, 116, 46, 106, 112, 103, 34, 44, 34, 80, 108, 97, 116, 101, 78, 117, 109, 34, 58, 34, -27, -87, -128, -26, -91, -94, 49, 50, 51, 52, 53, 34, 44, 34, 83, 116, 97, 102, 102, 73, 68, 34, 58, 34, 48, 48, 49, 34, 44, 34, 83, 116, 97, 116, 105, 111, 110, 73, 68, 34, 58, 34, 48, 53, 48, 49, 34, 44, 34, 86, 101, 104, 105, 99, 108, 101, 67, 108, 97, 115, 115, 34, 58, 34, 49, 34, 44, 34, 86, 101, 104, 105, 99, 108, 101, 67, 111, 108, 111, 114, 34, 58, 34, 89, 34, 125, 125, 10";
}
