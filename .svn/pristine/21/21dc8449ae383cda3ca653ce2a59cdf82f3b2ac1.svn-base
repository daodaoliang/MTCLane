package com.hgits.control;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import org.apache.log4j.Logger;

/**
 * 建立resourceTemp文件夹， 软件启动时检测该文件夹， 若检测到该文件夹下有properties文件，
 * 则将该properties文件与resource文件夹下相应的properties文件做比较，
 * resourceTemp下有而resource没有，在resource追加
 * resourceTemp下有resource有但不同，根据resourceTemp更新resource
 * resourceTemp下有resource有并且resource下的属性被注释，根据resourceTemp更新resource
 *
 * @author WangGuodong
 */
public class RsControl {

    private final String dir1 = "resourceTemp";
    private final String dir2 = "resource";
    private final String equalMark = "=";
    private Logger logger = Logger.getLogger(RsControl.class.getName());
    private final String defaultCharset = "UTF-8";

    public void run() {
        File file = new File(dir1);
        if (!file.exists() || !file.isDirectory()) {
            logger.debug("创建resourceTemp文件夹");
            boolean flag = file.mkdirs();
            if (flag) {
                logger.debug("创建resourceTemp文件夹成功");
            } else {
                logger.debug("创建resourceTemp文件夹失败");
            }
            return;
        }
        File[] list = file.listFiles();
        for (File f : list) {
            String name = f.getName();
            if (name.endsWith(".properties")) {
                String resourceFilePath = dir1 + File.separator + name;
                String targetFilePath = dir2 + File.separator + name;
                List<String> resourceList = getListFromFile(resourceFilePath);//获取源文件内容
                if (resourceList == null || resourceList.isEmpty()) {//源文件无内容
                    continue;
                }
                List<String> targetList = getListFromFile(targetFilePath);//获取目标文件内容
                compareLists(targetFilePath, resourceList, targetList);
            }
        }
    }

    /**
     * 获取文件内容
     *
     * @param resourceFilePath 文件路径
     * @return 文件集合
     */
    private List<String> getListFromFile(String resourceFilePath) {
        List<String> list = new ArrayList();
        FileInputStream fis = null;
        InputStreamReader isr = null;
        BufferedReader br = null;
        try {
            File resourceFile = new File(resourceFilePath);
            if (!resourceFile.exists() || !resourceFile.isFile() || resourceFile.isHidden()) {
                logger.debug("文件" + resourceFilePath + "不存在");
                return list;
            }
            fis = new FileInputStream(resourceFile);
            isr = new InputStreamReader(fis);
            br = new BufferedReader(isr);
            String str;
            while ((str = br.readLine()) != null) {
                list.add(str);
            }
        } catch (FileNotFoundException ex) {
            logger.error(ex, ex);
        } catch (IOException ex) {
            logger.error(ex, ex);
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (IOException ex) {
                logger.error(ex);
            }
            try {
                if (isr != null) {
                    isr.close();
                }
            } catch (IOException ex) {
                logger.error(ex);
            }
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                logger.error(ex);
            }
        }
        return list;
    }

    private void compareLists(String targetFilePath, List<String> resourceList, List<String> targetList) {
        boolean flag = false;
        for (String str : resourceList) {
            if (str == null || str.trim().isEmpty()) {
                continue;
            }
            if (str.contains(equalMark)) {//内容中包含等号
                str = str.replaceAll(" ", "");//去除属性中的空格
                int index = getStrIndexFromList(targetList, str);//获取下标
                if (index >= 0) {
                    flag = true;
                    targetList.set(index, str);
                }
            } else {//内容中无等号
                continue;
            }
        }
        if (flag) {
            updateFile(targetFilePath, targetList);
        }
    }

    /**
     * 获取指定字符串在集合中的下标（忽略空格）
     *
     * @param list 集合
     * @param str 指定字符串
     * @return -1表示集合中无此字符串
     */
    private int getStrIndexFromList(List<String> list, String str) {
        if (str == null || str.trim().isEmpty()) {
            return -1;
        }
        str = str.replaceAll(" ", "");
        if (!str.contains(equalMark)) {
            return -1;
        }
        int index = -1;
        int len = list.size();
        for (int i = 0; i < len; i++) {
            String s = list.get(i);
            if (s == null) {
                continue;
            }
            s = s.replaceAll(" ", "");
            s = s.replaceAll("#", "");
            int index1 = s.indexOf(equalMark);
            int index2 = str.indexOf(equalMark);
            
            if (s.equals(str)) {
                index = i;
                break;
            }
        }
        return index;
    }

    private boolean compareStr(String str1, String str2) {
        boolean flag = false;
        if (str1 == null || str2 == null || str1.trim().isEmpty()) {
            return flag;
        }

        return flag;
    }

    /**
     * 更新文件
     *
     * @param filePath 文件路径
     * @param list 文件内容
     */
    private void updateFile(String filePath, List<String> list) {
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(filePath);
            for (String str : list) {
                if (str != null) {
                    byte[] buffer = (str + "\r\n").getBytes(defaultCharset);
                    fos.write(buffer);
                    fos.flush();
                }
            }
        } catch (FileNotFoundException ex) {
            logger.error(ex, ex);
        } catch (UnsupportedEncodingException ex) {
            logger.error(ex, ex);
        } catch (IOException ex) {
            logger.error(ex, ex);
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException ex) {
                    logger.error(ex, ex);
                }
            }
        }
    }
}
